{  "info": {
    "name": "E-Commerce Service E2E Tests",
    "description": "End-to-end test suite for microservices-based ecommerce platform",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "1. Create user, credential, and multiple products",
      "description": "Creates a test user with credentials and multiple products to be used in subsequent tests",
      "item": [
        {
          "name": "Register User",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('testUsername', 'testuser_' + pm.variables.replaceIn('{{$timestamp}}'));",
                  "pm.collectionVariables.set('testPassword', 'Test123!');",
                  "pm.collectionVariables.set('testEmail', 'test.' + pm.variables.replaceIn('{{$timestamp}}') + '@example.com');"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function() {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response contains user details', function() {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('object');",
                  "    pm.expect(response.username).to.equal(pm.collectionVariables.get('testUsername'));",
                  "    pm.expect(response.email).to.equal(pm.collectionVariables.get('testEmail'));",
                  "    pm.collectionVariables.set('userId', response.userId);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{testUsername}}\",\n    \"email\": \"{{testEmail}}\",\n    \"password\": \"{{testPassword}}\",\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/user-service/api/users",
              "host": ["{{baseUrl}}"],
              "path": ["user-service", "api", "users"]
            }
          }
        },
        {
          "name": "Login User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains auth token', function() {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.token).to.exist;",
                  "    pm.collectionVariables.set('authToken', response.token);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{testUsername}}\",\n    \"password\": \"{{testPassword}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/authenticate",
              "host": ["{{baseUrl}}"],
              "path": ["api", "authenticate"]
            }
          }
        },
        {
          "name": "List All Products",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response structure is valid', function() {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('object');",
                  "    pm.expect(response.items).to.be.an('array');",
                  "    ",
                  "    if (response.items.length > 0) {",
                  "        const product = response.items[0];",
                  "        pm.expect(product).to.have.property('productId');",
                  "        pm.expect(product).to.have.property('productTitle');",
                  "        pm.expect(product).to.have.property('priceUnit');",
                  "        pm.expect(product.priceUnit).to.be.a('number');",
                  "    }",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "if (response.items && response.items.length > 0) {",
                  "    pm.collectionVariables.set('productId', response.items[0].productId);",
                  "    console.log('Found existing product:', response.items[0].productTitle);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/product-service/api/products",
              "host": ["{{baseUrl}}"],
              "path": ["product-service", "api", "products"]
            }
          }
        },
        {          "name": "Create New Product",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('testProductTitle', 'Test Product ' + pm.variables.replaceIn('{{$randomProductName}}'));",
                  "pm.collectionVariables.set('testSku', 'TST-' + pm.variables.replaceIn('{{$randomInt}}'));",
                  "pm.collectionVariables.set('testPrice', Math.round(Math.random() * 1000 * 100) / 100);"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function() {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response contains created product details', function() {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('object');",
                  "    pm.expect(response.productId).to.exist;",
                  "    pm.expect(response.productTitle).to.equal(pm.collectionVariables.get('testProductTitle'));",
                  "    pm.expect(response.sku).to.equal(pm.collectionVariables.get('testSku'));",
                  "    pm.expect(response.priceUnit).to.equal(Number(pm.collectionVariables.get('testPrice')));",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.collectionVariables.set('newProductId', response.productId);",
                  "console.log('Created new product:', response.productTitle, 'with ID:', response.productId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"productTitle\": \"{{testProductTitle}}\",\n  \"imageUrl\": \"https://picsum.photos/200/300?random={{$timestamp}}\",\n  \"sku\": \"{{testSku}}\",\n  \"priceUnit\": {{testPrice}},\n  \"quantity\": {{$randomInt}},\n  \"description\": \"{{$randomLoremParagraph}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/product-service/api/products",
              "host": ["{{baseUrl}}"],
              "path": ["product-service", "api", "products"]
            }
          }
        }
      ]
    },
    {
      "name": "2. Make a payment",
      "description": "Tests the complete payment flow including cart creation, order placement, and payment processing",
      "item": [
        {
          "name": "Create Order",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('orderDate', new Date().toISOString());",
                  "// userId is already set from authentication response"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function() {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Order created with correct data', function() {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('object');",
                  "    pm.expect(response.orderId).to.exist;",
                  "    pm.expect(response.userId).to.equal(pm.collectionVariables.get('userId'));",
                  "    pm.expect(response.orderStatus).to.equal('PENDING');",
                  "    pm.expect(response.orderDate).to.equal(pm.collectionVariables.get('orderDate'));",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.collectionVariables.set('orderId', response.orderId);",
                  "console.log('Created new order:', response.orderId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"{{userId}}\",\n  \"orderStatus\": \"PENDING\",\n  \"orderDate\": \"{{orderDate}}\",\n  \"shippingAddress\": {\n    \"street\": \"{{$randomStreetAddress}}\",\n    \"city\": \"{{$randomCity}}\",\n    \"state\": \"{{$randomState}}\",\n    \"country\": \"{{$randomCountry}}\",\n    \"zipCode\": \"{{$randomZipCode}}\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/order-service/api/orders",
              "host": ["{{baseUrl}}"],
              "path": ["order-service", "api", "orders"]
            }
          }
        },
        {
          "name": "Add Item to Order",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function() {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ],          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"orderId\": \"{{orderId}}\",\n  \"productId\": \"{{productId}}\",\n  \"quantity\": 2\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/shipping-service/api/shippings",
              "host": ["{{baseUrl}}"],
              "path": ["shipping-service", "api", "shippings"]
            }
          }
        },
        {
          "name": "Create Payment",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('paymentAmount', pm.variables.replaceIn('{{testPrice}}'));",
                  "pm.collectionVariables.set('paymentMethod', 'CREDIT_CARD');",
                  "pm.collectionVariables.set('transactionId', 'TRX-' + pm.variables.replaceIn('{{$timestamp}}'));",
                  "console.log('Creating payment for order:', pm.collectionVariables.get('orderId'));"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function() {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Payment created successfully', function() {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('object');",
                  "    pm.expect(response.paymentId).to.exist;",
                  "    pm.expect(response.orderId).to.equal(pm.collectionVariables.get('orderId'));",
                  "    pm.expect(response.amount).to.equal(Number(pm.collectionVariables.get('paymentAmount')));",
                  "    pm.expect(response.paymentStatus).to.equal('COMPLETED');",
                  "    pm.expect(response.transactionId).to.equal(pm.collectionVariables.get('transactionId'));",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.collectionVariables.set('paymentId', response.paymentId);",
                  "console.log('Created payment:', response.paymentId, 'for order:', response.orderId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"orderId\": \"{{orderId}}\",\n  \"amount\": {{paymentAmount}},\n  \"paymentMethod\": \"{{paymentMethod}}\",\n  \"paymentStatus\": \"COMPLETED\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"cardDetails\": {\n    \"cardNumber\": \"4111111111111111\",\n    \"expiryMonth\": \"12\",\n    \"expiryYear\": \"2025\",\n    \"cvv\": \"123\"\n  },\n  \"billingAddress\": {\n    \"street\": \"{{$randomStreetAddress}}\",\n    \"city\": \"{{$randomCity}}\",\n    \"state\": \"{{$randomState}}\",\n    \"country\": \"{{$randomCountry}}\",\n    \"zipCode\": \"{{$randomZipCode}}\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/payment-service/api/payments",
              "host": ["{{baseUrl}}"],
              "path": ["payment-service", "api", "payments"]
            }
          }
        },
        {
          "name": "Verify Payment",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Payment status is COMPLETED', function() {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.paymentStatus).to.equal('COMPLETED');",
                  "    pm.expect(response.orderId).to.equal(pm.collectionVariables.get('orderId'));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/payment-service/api/payments/{{paymentId}}",
              "host": ["{{baseUrl}}"],
              "path": ["payment-service", "api", "payments", "{{paymentId}}"]
            }
          }
        }
      ]
    },
    {
      "name": "3. Create, update and delete shipping",
      "description": "Tests the full CRUD operations for shipping management",
      "item": [
        {
          "name": "Create Shipping",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('shippingStreet', '123 Test St');",
                  "pm.collectionVariables.set('shippingCity', 'Test City');",
                  "pm.collectionVariables.set('shippingState', 'TS');",
                  "pm.collectionVariables.set('shippingZip', '12345');",
                  "pm.collectionVariables.set('shippingCountry', 'Testland');"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function() {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Shipping created successfully', function() {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('object');",
                  "    pm.expect(response.shippingId).to.exist;",
                  "    pm.expect(response.street).to.equal(pm.collectionVariables.get('shippingStreet'));",
                  "    pm.expect(response.city).to.equal(pm.collectionVariables.get('shippingCity'));",
                  "    pm.expect(response.state).to.equal(pm.collectionVariables.get('shippingState'));",
                  "    pm.expect(response.zipCode).to.equal(pm.collectionVariables.get('shippingZip'));",
                  "    pm.expect(response.country).to.equal(pm.collectionVariables.get('shippingCountry'));",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.collectionVariables.set('shippingId', response.shippingId);",
                  "console.log('Created shipping:', response.shippingId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"{{userId}}\",\n  \"street\": \"{{shippingStreet}}\",\n  \"city\": \"{{shippingCity}}\",\n  \"state\": \"{{shippingState}}\",\n  \"zipCode\": \"{{shippingZip}}\",\n  \"country\": \"{{shippingCountry}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/shipping-service/api/shippings",
              "host": ["{{baseUrl}}"],
              "path": ["shipping-service", "api", "shippings"]
            }
          }
        },
        {
          "name": "Update Shipping",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('newShippingStreet', '456 New St');",
                  "pm.collectionVariables.set('newShippingCity', 'New City');",
                  "pm.collectionVariables.set('newShippingState', 'NS');",
                  "pm.collectionVariables.set('newShippingZip', '54321');",
                  "pm.collectionVariables.set('newShippingCountry', 'Newland');"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Shipping updated successfully', function() {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('object');",
                  "    pm.expect(response.shippingId).to.exist;",
                  "    pm.expect(response.street).to.equal(pm.collectionVariables.get('newShippingStreet'));",
                  "    pm.expect(response.city).to.equal(pm.collectionVariables.get('newShippingCity'));",
                  "    pm.expect(response.state).to.equal(pm.collectionVariables.get('newShippingState'));",
                  "    pm.expect(response.zipCode).to.equal(pm.collectionVariables.get('newShippingZip'));",
                  "    pm.expect(response.country).to.equal(pm.collectionVariables.get('newShippingCountry'));",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.collectionVariables.set('shippingId', response.shippingId);",
                  "console.log('Updated shipping:', response.shippingId);"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"shippingId\": \"{{shippingId}}\",\n  \"userId\": \"{{userId}}\",\n  \"street\": \"{{newShippingStreet}}\",\n  \"city\": \"{{newShippingCity}}\",\n  \"state\": \"{{newShippingState}}\",\n  \"zipCode\": \"{{newShippingZip}}\",\n  \"country\": \"{{newShippingCountry}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/shipping-service/api/shippings/{{shippingId}}",
              "host": ["{{baseUrl}}"],
              "path": ["shipping-service", "api", "shippings", "{{shippingId}}"]
            }
          }
        },
        {
          "name": "Delete Shipping",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 204', function() {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  "",
                  "console.log('Deleted shipping:', pm.collectionVariables.get('shippingId'));"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/shipping-service/api/shippings/{{shippingId}}",
              "host": ["{{baseUrl}}"],
              "path": ["shipping-service", "api", "shippings", "{{shippingId}}"]
            }
          }
        }
      ]
    },
    {
      "name": "4. Add multiple fav products and remove one",
      "description": "Tests favorite product management including adding multiple products and removing one",
      "item": [
        {
          "name": "Add Product to Favorites",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Product is added to favorites', function() {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('object');",
                  "    pm.expect(response.message).to.equal('Product added to favorites');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"{{userId}}\",\n  \"productId\": \"{{productId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/favorites-service/api/favorites",
              "host": ["{{baseUrl}}"],
              "path": ["favorites-service", "api", "favorites"]
            }
          }
        },
        {
          "name": "Remove Product from Favorites",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Product is removed from favorites', function() {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('object');",
                  "    pm.expect(response.message).to.equal('Product removed from favorites');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/favorites-service/api/favorites/{{productId}}",
              "host": ["{{baseUrl}}"],
              "path": ["favorites-service", "api", "favorites", "{{productId}}"]
            }
          }
        }
      ]
    },
    {
      "name": "5. Test deleted user",
      "description": "Tests the system behavior when a user is deleted and validates the cascade effects",
      "item": [
        {
          "name": "Delete Test User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 204', function() {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  "",
                  "console.log('Deleted test user:', pm.collectionVariables.get('userId'));"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/user-service/api/users/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["user-service", "api", "users", "{{userId}}"]
            }
          }
        }
      ]
    }
  ],  "variable": [
    {
      "key": "baseUrl",
      "value": "http://api-gateway:8080",
      "type": "string"
    },
    {
      "key": "authToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string"
    },
    {
      "key": "testUsername",
      "value": "",
      "type": "string"
    },
    {
      "key": "testPassword",
      "value": "",
      "type": "string"
    },
    {
      "key": "testEmail",
      "value": "",
      "type": "string"
    },
    {
      "key": "productId",
      "value": "",
      "type": "string"
    },
    {
      "key": "newProductId",
      "value": "",
      "type": "string"
    },
    {
      "key": "orderId",
      "value": "",
      "type": "string"
    },
    {
      "key": "paymentId",
      "value": "",
      "type": "string"
    },
    {
      "key": "shippingId",
      "value": "",
      "type": "string"
    }
  ]
}
