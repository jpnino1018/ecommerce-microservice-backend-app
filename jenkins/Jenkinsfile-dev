pipeline {
    agent {
        kubernetes {
            yaml '''
                apiVersion: v1
                kind: Pod
                metadata:
                  labels:
                    app: jenkins-agent
                spec:
                  containers:
                  - name: jnlp
                    image: jenkins/inbound-agent:latest
                  - name: maven
                    image: maven:3.8.7-eclipse-temurin-11
                    command: ['cat']
                    tty: true
                    resources:
                      limits:
                        memory: "2Gi"
                        cpu: "1"
                      requests:
                        memory: "1Gi"
                        cpu: "500m"
                    volumeMounts:
                    - name: maven-cache
                      mountPath: /root/.m2
                  - name: docker
                    image: docker:20.10.23
                    command: ['cat']
                    tty: true
                    volumeMounts:
                    - name: docker-sock
                      mountPath: /var/run/docker.sock
                  - name: kubectl
                    image: lachlanevenson/k8s-kubectl:latest
                    command: ['cat']
                    tty: true
                  - name: azure-cli
                    image: mcr.microsoft.com/azure-cli:latest
                    command: ['cat']
                    tty: true
                  volumes:
                  - name: maven-cache
                    emptyDir: {}
                  - name: docker-sock
                    hostPath:
                      path: /var/run/docker.sock
            '''
        }
    }

    environment {
        RESOURCE_GROUP = "ecommerce-rg"
        AKS_NAME = "ecommerce-aks"
        K8S_NAMESPACE = "dev"
    }

    stages {
        // stage('Run Unit Tests') {
        //     steps {
        //         echo 'Running unit tests...'
        //         sh './mvnw test'
        //     }
        // }

        stage('Configure AKS Credentials') {
            steps {
                container('azure-cli') {
                    script {
                        // Ensure Azure CLI is logged in
                        sh '''
                            az aks get-credentials --resource-group "$RESOURCE_GROUP" --name "$AKS_NAME" --overwrite-existing
                        '''
                    }
                }
            }
        }

        stage('Ensure Namespace Exists') {
            steps {
                container('kubectl') {
                    script {
                        // Check if the namespace exists, create it if not
                        sh '''
                            kubectl get namespace "$K8S_NAMESPACE" || kubectl create namespace "$K8S_NAMESPACE"
                        '''
                    }
                }
            }
        }

        stage('Deploy Service Discovery') {
            steps {
                container('kubectl') {
                    script {
                        // Ensure service discovery deployment is applied first
                        sh '''
                            kubectl apply -f k8s/dev/service-discovery-deployment.yml -n "$K8S_NAMESPACE"
                            kubectl wait --for=condition=Available deployment/service-discovery --timeout=300s -n "$K8S_NAMESPACE"
                        '''
                    }
                }
            }
        }

        stage('Deploy Core Services') {
            steps {
                container('kubectl') {
                    script {
                        sh 'kubectl apply -f k8s/core/ -n "$K8S_NAMESPACE"'
                    }
                }
            }
        }

        stage('Deploy Remaining Dev Services') {
            steps {
                container('kubectl') {
                    script {
                        sh '''
                            for file in k8s/dev/*.yml; do
                              if [[ "$file" != *"service-discovery-deployment.yml" ]]; then
                                kubectl apply -f "$file" -n "$K8S_NAMESPACE"
                              fi
                            done
                        '''
                    }
                }
            }
        }

        stage('Wait for All Deployments') {
            steps {
                container('kubectl') {
                    script {
                        sh '''
                            for deployment in $(kubectl get deployments -n "$K8S_NAMESPACE" -o jsonpath='{.items[*].metadata.name}'); do
                                echo "Waiting for deployment/$deployment..."
                                kubectl wait --for=condition=Available deployment/"$deployment" --timeout=300s -n "$K8S_NAMESPACE" || {
                                    echo "Deployment $deployment failed to become ready. Exiting."
                                    exit 1
                                }
                            done
                        '''
                    }
                }
            }
        }

        stage('Run Newman Integration Tests') {
            steps {
                container('kubectl') {
                    script {
                        sh '''
                            kubectl apply -f k8s/newman/newman-job.yml -n "$K8S_NAMESPACE"
                            kubectl wait --for=condition=complete job/newman-integration-tests --timeout=600s -n "$K8S_NAMESPACE" || {
                                echo "Newman Job failed or timed out. Exiting."
                                exit 1
                            }

                            NEWMAN_POD=$(kubectl get pods -n "$K8S_NAMESPACE" -l job-name=newman-integration-tests -o jsonpath='{.items[0].metadata.name}')
                            if [ -n "$NEWMAN_POD" ]; then
                            echo "Newman Job completed. Fetching logs..."
                            kubectl logs "$NEWMAN_POD" -n "$K8S_NAMESPACE"
                            else
                            echo "Newman Job pod not found."
                            fi
                        '''
                    }
                }
            }
        }

        stage('Clean Up Newman Job') {
            steps {
                container('kubectl') {
                    script {
                        sh 'kubectl delete job newman-integration-tests -n "$K8S_NAMESPACE" || true'
                    }
                }
            }
        }
    }

    post {
        failure {
            echo 'Pipeline failed. Check logs for details.'
        }
        success {
            echo 'Deployment and integration tests completed successfully.'
        }
    }
}
