pipeline {
    agent any

    environment {
        RESOURCE_GROUP = 'ecommerce-rg-dev'
        AKS_NAME = 'ecommerce-aks-dev'
        K8S_NAMESPACE = 'dev'
    }

    tools {
        dockerTool 'docker-tool'
    }


    stages {

        stage('Login to Azure') {
            steps {
                withCredentials([azureServicePrincipal('azure-credentials')]) {
                    sh '''
                        echo "Logging into Azure CLI..."
                        az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET --tenant $AZURE_TENANT_ID
                        az account show
                    '''
                }
            }
        }

        stage('Login to Docker') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                        echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                    '''
                }
            }
        }

        stage('Run Unit Tests') {
            steps {
                echo 'Running unit tests...'
                sh './mvnw test'
            }
        }

        stage('Build & Push Docker Images') {
            steps {
                script {
                    def ignoredDirs = ['.github', '.mvn', 'jenkins', 'k8s', 'performance-tests', 'src']
                    def services = sh(
                        script: "find . -maxdepth 1 -type d \\( ${ignoredDirs.collect { "-name ${it}" }.join(" -o ")} \\) -prune -false -o -type d -exec test -f '{}/Dockerfile' \\; -print | sed 's|^./||'",
                        returnStdout: true
                    ).trim().split("\n")

                    withCredentials([usernamePassword(credentialsId: 'docker-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        for (service in services) {
                            def imageTag = "${DOCKER_USER}/${service}:latest"
                            echo "üì¶ Building and pushing image for ${service}..."
                            
                            sh """
                                docker build -t ${imageTag} ./${service}
                                docker push ${imageTag}
                            """
                        }
                    }
                }
            }
        }


        stage('Configure AKS Credentials') {
            steps {
                sh '''
                    az aks get-credentials --resource-group "$RESOURCE_GROUP" --name "$AKS_NAME" --overwrite-existing
                '''
            }
        }

        stage('Ensure Namespace Exists') {
            steps {
                sh '''
                    pwd
                    ls -la
                    ls -la k8s
                    ls -la k8s/dev
                    kubectl apply -f k8s/dev/namespace.yml
                '''
            }
        }

        stage('Deploy Service Discovery') {
            steps {
                sh '''
                    kubectl apply -f k8s/dev/service-discovery-deployment.yml -n "$K8S_NAMESPACE"
                    kubectl wait --for=condition=Available deployment/service-discovery --timeout=300s -n "$K8S_NAMESPACE"
                '''
            }
        }

        stage('Deploy Core Services') {
            steps {
                sh 'kubectl apply -f k8s/core/ -n "$K8S_NAMESPACE"'
            }
        }

        stage('Deploy Remaining Dev Services') {
            steps {
                sh '''
                    for file in k8s/dev/*.yml; do
                        case "$file" in
                            *service-discovery-deployment.yml)
                                echo "Skipping $file..."
                                ;;
                            *)
                                echo "Applying $file..."
                                kubectl apply -f "$file" -n "$K8S_NAMESPACE"
                                ;;
                        esac
                    done
                '''
            }
        }


        stage('Wait for All Deployments') {
            steps {
                sh '''
                    echo "Waiting for all deployments to become ready..."
                    for deployment in $(kubectl get deployments -n "$K8S_NAMESPACE" -o jsonpath='{.items[*].metadata.name}'); do
                        echo "Waiting for $deployment..."
                        kubectl wait --for=condition=Available deployment/"$deployment" --timeout=300s -n "$K8S_NAMESPACE" || {
                            echo "Deployment $deployment failed."
                            exit 1
                        }
                    done
                '''
            }
        }

        stage('Run Newman Integration Tests') {
            steps {
                sh '''
                    echo "Waiting for 5 minutes before starting Newman integration tests..."
                    sleep 300
                    kubectl apply -f k8s/newman/newman-job.yml -n "$K8S_NAMESPACE"
                    kubectl wait --for=condition=complete job/newman-integration-tests --timeout=300s -n "$K8S_NAMESPACE" || {
                        echo "Newman tests failed or timed out."
                        exit 1
                    }

                    NEWMAN_POD=$(kubectl get pods -n "$K8S_NAMESPACE" -l job-name=newman-integration-tests -o jsonpath='{.items[0].metadata.name}')
                    if [ -n "$NEWMAN_POD" ]; then
                        echo "Fetching Newman test logs..."
                        kubectl logs "$NEWMAN_POD" -n "$K8S_NAMESPACE"
                    else
                        echo "Newman pod not found."
                    fi
                '''
            }
        }

        stage('Clean Up Newman Job') {
            steps {
                sh 'kubectl delete job newman-integration-tests -n "$K8S_NAMESPACE" || true'
            }
        }
    }

    post {
        always {
            echo 'Cleaning up workspace...'
            deleteDir()
        }

        success {
            echo '‚úÖ Deployment and integration tests completed successfully.'
        }

        failure {
            echo '‚ùå Pipeline failed. Check logs above.'
        }
    }
}
